#!/usr/bin/env python

'''
This node calculates the average depth value at the center of the camera for aligning purpose at initialization

PUBLISHER:
  + <camera_motion_depth> (<Float32>) ~ publish the average depth value

SUBSCRIBER:
  + <camera/depth/image_rect_raw> (<Image>) ~ get the raw depth value for each pixel

'''


import rospy
import math
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
from camera_motion.helper import DepthHelper
class Depth_Processor:
    """ Process the images """
    def __init__(self):
        self._bridge = CvBridge()
        self._sub = rospy.Subscriber("camera/depth/image_rect_raw", Image, self.callback)
        self._pub = rospy.Publisher("camera_motion_depth", Float32 , queue_size=10)
        self.kernel = 2 #has to be an even number
        self.time_avg = 20
        self.time_queue = []

        self.helper = DepthHelper(self.time_avg, self.kernel)

    def callback(self, data):
        """ Callback for processing an image
    
        Args: 
            data (sensor_msgs/Image) the raw image from the camera
        """
        # convert to open cv
        cv_image = self._bridge.imgmsg_to_cv2(data, "16UC1")
        avg_depth_space = self.helper.spaceSmoothing(cv_image)
        avg_depth_time = self.helper.timeSmoothing(self.time_queue, avg_depth_space)

        self._pub.publish(avg_depth_time)




def main():
    """ The main() function. """
    rospy.init_node('find_depth')
    r = rospy.Rate(50)

    p = Depth_Processor()
    while not rospy.is_shutdown():
        r.sleep()



if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass